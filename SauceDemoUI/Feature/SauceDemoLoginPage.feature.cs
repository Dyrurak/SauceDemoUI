// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SauceDemoUI.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SauceDemoLoginPage")]
    public partial class SauceDemoLoginPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SauceDemoLoginPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SauceDemoLoginPage", "\tRegression test scenarios for login page of Sauce Demo", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.And("Chrome Browser is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 6
testRunner.And("\'https://www.saucedemo.com\' page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoSuccessfulLoginWithStandartUserAndCorrectPassword")]
        public virtual void SauceDemoSuccessfulLoginWithStandartUserAndCorrectPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoSuccessfulLoginWithStandartUserAndCorrectPassword", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 8
 testRunner.And("\'standard_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 9
 testRunner.And("\'secret_sauce\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 10
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 11
 testRunner.And("Login operation is performed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoSuccessfulLoginWithProblemUserAndCorrectPassword")]
        public virtual void SauceDemoSuccessfulLoginWithProblemUserAndCorrectPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoSuccessfulLoginWithProblemUserAndCorrectPassword", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 14
 testRunner.And("\'problem_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 15
 testRunner.And("\'secret_sauce\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 16
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 17
 testRunner.And("Login operation is performed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoSuccessfulLoginWithPerformanceGlitchUserAndCorrectPassword")]
        public virtual void SauceDemoSuccessfulLoginWithPerformanceGlitchUserAndCorrectPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoSuccessfulLoginWithPerformanceGlitchUserAndCorrectPassword", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 20
 testRunner.And("\'performance_glitch_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 21
 testRunner.And("\'secret_sauce\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 22
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 23
 testRunner.And("Login operation is performed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithLockedUsernameAndCorrectPassword")]
        public virtual void SauceDemoFailLoginWithLockedUsernameAndCorrectPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithLockedUsernameAndCorrectPassword", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 26
 testRunner.And("\'locked_out_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 27
 testRunner.And("\'secret_sauce\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 28
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 29
 testRunner.And("\'Epic sadface: Sorry, this user has been locked out.\' error is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithCorrectUsernameAndWrongPassword")]
        public virtual void SauceDemoFailLoginWithCorrectUsernameAndWrongPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithCorrectUsernameAndWrongPassword", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 32
 testRunner.And("\'standard_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 33
 testRunner.And("\'wrong_password\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 34
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 35
 testRunner.And("\'Epic sadface: Username and password do not match any user in this service\' error" +
                    " is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithWrongUsernameAndCorrectPassword")]
        public virtual void SauceDemoFailLoginWithWrongUsernameAndCorrectPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithWrongUsernameAndCorrectPassword", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 38
 testRunner.And("\'wrong_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 39
 testRunner.And("\'secret_sauce\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 40
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 41
 testRunner.And("\'Epic sadface: Username and password do not match any user in this service\' error" +
                    " is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithWrongUsernameAndWrongPassword")]
        public virtual void SauceDemoFailLoginWithWrongUsernameAndWrongPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithWrongUsernameAndWrongPassword", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 44
 testRunner.And("\'wrong_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 45
 testRunner.And("\'wrong_password\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 46
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 47
 testRunner.And("\'Epic sadface: Username and password do not match any user in this service\' error" +
                    " is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithCorrectUsernameAndEmptyPassword")]
        public virtual void SauceDemoFailLoginWithCorrectUsernameAndEmptyPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithCorrectUsernameAndEmptyPassword", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 50
 testRunner.And("\'standard_user\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 51
 testRunner.And("\'\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 52
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 53
 testRunner.And("\'Epic sadface: Password is required\' error is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithEmptyUsernameAndCorrectPassword")]
        public virtual void SauceDemoFailLoginWithEmptyUsernameAndCorrectPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithEmptyUsernameAndCorrectPassword", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 56
 testRunner.And("\'\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 57
 testRunner.And("\'secret_sauce\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 58
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 59
 testRunner.And("\'Epic sadface: Username is required\' error is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SauceDemoFailLoginWithEmptyUsernameAndEmptyPassword")]
        public virtual void SauceDemoFailLoginWithEmptyUsernameAndEmptyPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SauceDemoFailLoginWithEmptyUsernameAndEmptyPassword", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 62
 testRunner.And("\'\' is entered as username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 63
 testRunner.And("\'\' is entered as password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 64
 testRunner.And("Login button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line 65
 testRunner.And("\'Epic sadface: Username is required\' error is seen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

